// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VEExportSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import BanubaUtilities
import Foundation
import Swift
import UIKit
@_exported import VEExportSDK
import VideoEditor
import _Concurrency
import _StringProcessing
public protocol ImageSlideshow {
  @discardableResult
  func exportSlideshowImages(_ images: [VideoEditor.VideoEditorImageAssetProtocol], to fileUrl: Foundation.URL?, videoResolution: BanubaUtilities.VideoResolution, completion: ((Swift.Bool, Foundation.URL, Swift.Error?) -> Swift.Void)?) -> VEExportSDK.CancelExportHandler
}
extension VEExportSDK.ImageSlideshow {
  public func exportSlideshowImages(_ images: [VideoEditor.VideoEditorImageAssetProtocol], to fileUrl: Foundation.URL? = nil, videoResolution: BanubaUtilities.VideoResolution, completion: ((Swift.Bool, Foundation.URL, Swift.Error?) -> Swift.Void)?) -> VEExportSDK.CancelExportHandler
}
public enum ExportQuality {
  case videoConfiguration(VEExportSDK.ExportVideoInfo)
  case auto
}
public struct GifSettings {
  public var duration: Foundation.TimeInterval
  public init(duration: Foundation.TimeInterval)
}
public struct ExportConfiguration {
  public let videoConfigurations: [VEExportSDK.ExportVideoConfiguration]
  public let isCoverEnabled: Swift.Bool
  public var gifSettings: VEExportSDK.GifSettings?
  public init(videoConfigurations: [VEExportSDK.ExportVideoConfiguration], isCoverEnabled: Swift.Bool, gifSettings: VEExportSDK.GifSettings?)
}
public struct ExportVideoConfiguration {
  public let fileURL: Foundation.URL
  public let quality: VEExportSDK.ExportQuality
  public let watermarkConfiguration: VideoEditor.WatermarkConfiguration?
  public let useHEVCCodecIfPossible: Swift.Bool
  public init(fileURL: Foundation.URL, quality: VEExportSDK.ExportQuality, useHEVCCodecIfPossible: Swift.Bool, watermarkConfiguration: VideoEditor.WatermarkConfiguration?)
}
public protocol VEExportServicing : VEExportSDK.ImageSlideshow {
  func exportVideo(to fileURL: Foundation.URL, using exportVideoInfo: VEExportSDK.ExportVideoInfo, watermarkFilterModel: VideoEditor.VideoEditorFilterModel?, exportProgress: ((Foundation.TimeInterval) -> Swift.Void)?, completion: ((_ isSuccess: Swift.Bool, _ error: Swift.Error?) -> Swift.Void)?) -> VEExportSDK.CancelExportHandler?
  func exportAudio(to fileURL: Foundation.URL, completion: ((_ isSuccess: Swift.Bool, _ error: Swift.Error?) -> Swift.Void)?)
}
public let exportCancelledError: Foundation.NSError
public typealias Bitrate = Swift.Int
public class ExportVideoInfo {
  public enum Resolution : Swift.String {
    case qhd1440
    case fullHd1080
    case hd720
    case md540
    case md480
    case ld360
    case original
    public var size: CoreFoundation.CGSize {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let resolution: VEExportSDK.ExportVideoInfo.Resolution
  final public let aspect: BanubaUtilities.AspectRatio?
  final public let exportSettings: VEExportSDK.ExportVideoSettings
  public init(resolution: VEExportSDK.ExportVideoInfo.Resolution, aspect: BanubaUtilities.AspectRatio? = nil, useHEVCCodecIfPossible: Swift.Bool, frameRate: Swift.Int = 30, scalingMode: Swift.String = AVVideoScalingModeResize)
  public static func setupOriginalSize(size: CoreFoundation.CGSize)
  @objc deinit
}
public struct ExportVideoInfoFactory {
  public static func assetExportSettings(resolution: BanubaUtilities.VideoResolution, aspect: BanubaUtilities.AspectRatio? = nil, useHEVCCodecIfPossible: Swift.Bool, frameRate: Swift.Int = 30, scalingMode: Swift.String = AVVideoScalingModeResize) -> VEExportSDK.ExportVideoInfo
}
@_hasMissingDesignatedInitializers public class ExportVideoSettings {
  final public let width: Swift.Int
  final public let height: Swift.Int
  final public let aspect: BanubaUtilities.AspectRatio?
  final public let bitrate: VEExportSDK.Bitrate
  final public let frameRate: Swift.Int
  final public let codecType: AVFoundation.AVVideoCodecType
  final public let scalingMode: Swift.String
  public var options: [Swift.String : Any] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CancelExportHandler {
  public func cancel()
  @objc deinit
}
public class VEExport {
  public init?(videoEditorService: VideoEditor.VideoEditorService)
  @discardableResult
  public func exportVideo(to fileURL: Foundation.URL, using exportVideoInfo: VEExportSDK.ExportVideoInfo, watermarkFilterModel: VideoEditor.VideoEditorFilterModel?, exportProgress: ((Foundation.TimeInterval) -> Swift.Void)?, completion: ((_ isSuccess: Swift.Bool, _ error: Swift.Error?) -> Swift.Void)?) -> VEExportSDK.CancelExportHandler?
  public func exportAudio(to fileURL: Foundation.URL, completion: ((_ isSuccess: Swift.Bool, _ error: Swift.Error?) -> Swift.Void)?)
  @discardableResult
  public func exportSlideshowImages(_ images: [VideoEditor.VideoEditorImageAssetProtocol], to fileUrl: Foundation.URL? = nil, videoResolution: BanubaUtilities.VideoResolution, completion: ((Swift.Bool, Foundation.URL, Swift.Error?) -> Swift.Void)?) -> VEExportSDK.CancelExportHandler
  @objc deinit
}
extension VEExportSDK.ExportVideoInfo.Resolution : Swift.Equatable {}
extension VEExportSDK.ExportVideoInfo.Resolution : Swift.Hashable {}
extension VEExportSDK.ExportVideoInfo.Resolution : Swift.RawRepresentable {}
